{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar mapbox_gl_1 = __importDefault(require(\"mapbox-gl\"));\n\nvar Basemap_1 = __importDefault(require(\"./classes/Basemap\"));\n\nvar http_1 = require(\"./utils/http\");\n\nvar District_1 = require(\"./classes/District\");\n\nvar Subdistrict_1 = require(\"./classes/Subdistrict\");\n\nvar Neighbor_1 = require(\"./classes/Neighbor\");\n/**\r\n * Class utama dari GeoMan\r\n * @class GeoMan\r\n */\n\n\nvar GeoMan =\n/** @class */\nfunction () {\n  /**\r\n   * Membuat instance dari class GeoMan\r\n   * @param baseURL base url server geoman\r\n   * @param port port server geoman\r\n   * @param options map options\r\n   * @param style style map GeoMan: DEFAULT | DARK | LIGHT | WORLD\r\n   */\n  function GeoMan(baseURL, port, options, style) {\n    if (style === void 0) {\n      style = 'DEFAULT';\n    }\n\n    this.sources = [];\n    this.layers = [];\n    this.baseURL = baseURL;\n    this.port = port;\n    this.fullURL = \"\" + this.baseURL + (this.port === 80 ? '' : \":\" + this.port);\n    this.http = new http_1.HTTP(this.baseURL, this.port);\n    var link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.1.1/mapbox-gl.css';\n    document.head.appendChild(link);\n    options.style = this.fullURL + \"/api/public/tclayer?port=\" + this.port + \"&style=\" + style.toLowerCase();\n    this.center = options.center;\n    this.map = new mapbox_gl_1.default.Map(options);\n  }\n  /**\r\n   * Set callback saat style map sudah selesai di-load\r\n   */\n\n\n  GeoMan.prototype.setReadyCallback = function (fn) {\n    this.map.on('style.load', fn);\n  };\n  /**\r\n   * Tambah GeoJSON ke map\r\n   * @param id string unik untuk menandai layer\r\n   * @param data data geojson\r\n   */\n\n\n  GeoMan.prototype.addGeoJSON = function (id, type, data) {\n    return this.map.addLayer({\n      id: id,\n      type: type,\n      source: {\n        type: 'geojson',\n        data: data\n      }\n    });\n  };\n  /**\r\n   * Hapus layer GeoJSON dari map\r\n   * @param id id layer untuk dihapus\r\n   */\n\n\n  GeoMan.prototype.removeGeoJSON = function (id) {\n    return this.map.removeLayer(id);\n  };\n  /**\r\n   * Ambil daftar basemap publik\r\n   */\n\n\n  GeoMan.prototype.getBasemaps = function () {\n    var _this = this;\n\n    return this.http.get('/maps/basemaps').then(function (data) {\n      return data.map(function (r) {\n        return new Basemap_1.default(_this, r);\n      });\n    });\n  };\n  /**\r\n   * Ambil daftar kecamatan\r\n   */\n\n\n  GeoMan.prototype.getDistricts = function () {\n    var _this = this;\n\n    return this.http.get('/maps/districts').then(function (data) {\n      return data.map(function (r) {\n        return new District_1.District(_this, r);\n      });\n    });\n  };\n  /**\r\n   * Ambil kecamatan berdasarkan id\r\n   * @param id id kecamatan\r\n   */\n\n\n  GeoMan.prototype.getDistrict = function (id) {\n    var _this = this;\n\n    return this.http.get(\"/maps/districts/\" + id).then(function (data) {\n      return new District_1.District(_this, data);\n    });\n  };\n  /**\r\n   * Ambil kelurahan berdasarkan id kecamatan dan id kelurahan\r\n   * @param district_id id kecamatan\r\n   * @param subdistrict_id id kelurahan\r\n   */\n\n\n  GeoMan.prototype.getSubdistrict = function (district_id, subdistrict_id) {\n    var _this = this;\n\n    return this.http.get(\"/maps/districts/\" + district_id + \"/subdistricts/\" + subdistrict_id).then(function (data) {\n      var district = new District_1.District(_this, data.district);\n      return new Subdistrict_1.Subdistrict(_this, district, data);\n    });\n  };\n  /**\r\n   * Ambil lingkungan berdasarkan id kecamatan dan id kelurahan dan id lingkungan\r\n   * @param district_id id kecamatan\r\n   * @param subdistrict_id id kelurahan\r\n   * @param neighbor_id id lingkungan\r\n   */\n\n\n  GeoMan.prototype.getNeighbor = function (district_id, subdistrict_id, neighbor_id) {\n    var _this = this;\n\n    return this.http.get(\"/maps/districts/\" + district_id + \"/subdistricts/\" + subdistrict_id + \"/neighbors/\" + neighbor_id).then(function (data) {\n      var district = new District_1.District(_this, data.district);\n      var subdistrict = new Subdistrict_1.Subdistrict(_this, district, data.subdistrict);\n      return new Neighbor_1.Neighbor(_this, district, subdistrict, data);\n    });\n  };\n  /**\r\n   * Mengubah style map\r\n   * @param style id style\r\n   */\n\n\n  GeoMan.prototype.setStyle = function (style) {\n    this.map.setStyle(this.fullURL + \"/api/public/tclayer?port=\" + this.port + \"&style=\" + style.toLowerCase());\n  };\n  /**\r\n   * Clear semua fokus daerah dan center ke default\r\n   */\n\n\n  GeoMan.prototype.clearFocuses = function () {\n    if (this.map.getLayer('region-lay')) {\n      this.map.removeLayer('region-lay');\n      this.map.removeSource('region-lay');\n    }\n\n    this.map.flyTo({\n      center: this.center\n    });\n  };\n  /**\r\n   * Menentukan event di label wilayah\r\n   * @param ev event untuk di-attach\r\n   * @param regionName nama region yang akan di-attach event\r\n   * @param cb callback ketika event terjadi\r\n   */\n\n\n  GeoMan.prototype.setRegionLabelEvent = function (ev, regionName, cb) {\n    var _this = this;\n\n    var layerName = \"tc-basemap-layer-\" + regionName + \"-label\";\n    this.map.on(ev, layerName, function (d) {\n      return cb(d.features ? d.features[0] : null, d);\n    });\n    this.map.on('mouseenter', layerName, function (e) {\n      _this.map.getCanvas().style.cursor = 'pointer';\n    });\n    this.map.on('mouseleave', layerName, function (e) {\n      _this.map.getCanvas().style.cursor = '';\n    });\n  };\n\n  GeoMan.Styles = {\n    DEFAULT: 'DEFAULT',\n    DARK: 'DARK',\n    LIGHT: 'LIGHT',\n    WORLD: 'WORLD',\n    REGIONAL: 'REGIONAL',\n    SATELLITE: 'SATELLITE'\n  };\n  return GeoMan;\n}();\n\nexports.default = GeoMan;","map":null,"metadata":{},"sourceType":"script"}