"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Class Basemap yang menyimpan data basemap
 * @class Basemap
 */
var Basemap = /** @class */ (function () {
    /**
     * Membuat instance dari class Basemap
     * @param geoman instance class GeoMan
     * @param rawData data json raw dari backend
     */
    function Basemap(geoman, rawData) {
        this.id = rawData.id;
        this.name = rawData.name;
        this.fields = rawData.fields;
        this.type = rawData.type;
        this.description = rawData.description;
        this.color = rawData.color;
        this.geoman = geoman;
    }
    /**
     * Tampilkan basemap di map
     */
    Basemap.prototype.show = function (options) {
        var sourceID = "basemap-source-" + this.id;
        var layerID = "basemap-layer-" + this.id;
        if (!this.geoman.map.getSource(sourceID)) {
            this.geoman.map.addSource(sourceID, {
                type: 'vector',
                tiles: [this.geoman.fullURL + "/api/maps/basemaps/" + this.id + "/shapes?x={x}&y={y}&z={z}"]
            });
            this.geoman.sources.push(sourceID);
        }
        if (!this.geoman.map.getLayer(layerID)) {
            this.geoman.map.addLayer({
                'id': layerID,
                'type': this.type === 'Point' ? 'circle' : (this.type === 'LineString' ? 'line' : 'fill'),
                'source': sourceID,
                'source-layer': 'basemap',
                'paint': this.getPaintStyle(options ? options : { main_size: 1, border_size: 1 }),
            }, 'tc-basemap-layer-neighbor-label');
            this.geoman.layers.push(layerID);
        }
        else {
            this.geoman.map.setLayoutProperty(layerID, 'visibility', 'visible');
        }
    };
    /**
     * Sembunyikan basemap dari map
     */
    Basemap.prototype.hide = function () {
        var layerID = "basemap-layer-" + this.id;
        if (this.geoman.map.getLayer(layerID)) {
            this.geoman.map.setLayoutProperty(layerID, 'visibility', 'none');
        }
    };
    /**
     * Set opacity dari basemap
     * @param opacity nilai opacity
     */
    Basemap.prototype.setOpacity = function (opacity) {
        var layerID = "basemap-layer-" + this.id;
        if (this.geoman.map.getLayer(layerID)) {
            this.geoman.map.setPaintProperty(layerID, (this.type === 'Point' ? 'circle-opacity' : (this.type === 'LineString' ? 'line-opacity' : 'fill-opacity')), opacity);
        }
    };
    /**
     * Set paint style layer
     * @param options options
     * @param options.main_color warna utama
     * @param options.main_size ukuran utama.
     * @param options.border_color warna border
     * @param options.border_size ukuran border
     */
    Basemap.prototype.setStyle = function (options) {
        var layerID = "basemap-layer-" + this.id;
        if (this.geoman.map.getLayer(layerID)) {
            switch (this.type) {
                case 'Point':
                    this.geoman.map.setPaintProperty(layerID, 'circle-color', options.main_color ? options.main_color : this.color);
                    this.geoman.map.setPaintProperty(layerID, 'circle-radius', options.main_size);
                    this.geoman.map.setPaintProperty(layerID, 'circle-stroke-color', options.border_color ? options.border_color : this.color);
                    this.geoman.map.setPaintProperty(layerID, 'circle-stroke-width', options.border_size);
                    break;
                case 'LineString':
                    this.geoman.map.setPaintProperty(layerID, 'line-color', options.main_color ? options.main_color : this.color);
                    this.geoman.map.setPaintProperty(layerID, 'line-width', options.main_size);
                    break;
                default:
                    this.geoman.map.setPaintProperty(layerID, 'fill-color', options.main_color ? options.main_color : this.color);
                    this.geoman.map.setPaintProperty(layerID, 'fill-outline-color', options.border_color ? options.border_color : this.color);
                    break;
            }
        }
    };
    /**
     * Set event ke layer
     * @param ev nama event
     * @param cb callback
     */
    Basemap.prototype.on = function (ev, cb) {
        var _this = this;
        var layerName = "basemap-layer-" + this.id;
        this.geoman.map.on(ev, layerName, function (d) { return cb(d.features ? d.features[0] : null, d); });
        this.geoman.map.on('mouseenter', layerName, function (e) {
            _this.geoman.map.getCanvas().style.cursor = 'pointer';
        });
        this.geoman.map.on('mouseleave', layerName, function (e) {
            _this.geoman.map.getCanvas().style.cursor = '';
        });
    };
    /**
     * Memilih object `paint` untuk style layer
     * @param options options
     * @param options.main_color warna utama
     * @param options.main_size ukuran utama.
     * @param options.border_color warna border
     * @param options.border_size ukuran border
     */
    Basemap.prototype.getPaintStyle = function (options) {
        switch (this.type) {
            case 'Point':
                return {
                    'circle-color': options.main_color ? options.main_color : this.color,
                    'circle-radius': options.main_size,
                    'circle-stroke-color': options.border_color ? options.border_color : this.color,
                    'circle-stroke-width': options.border_size,
                };
                break;
            case 'LineString':
                return {
                    'line-color': options.main_color ? options.main_color : this.color,
                    'line-width': options.main_size
                };
                break;
            default:
                return {
                    'fill-color': options.main_color ? options.main_color : this.color,
                    'fill-outline-color': options.border_color ? options.border_color : this.color
                };
                break;
        }
    };
    return Basemap;
}());
exports.default = Basemap;
//# sourceMappingURL=Basemap.js.map