"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var mapbox_gl_1 = __importDefault(require("mapbox-gl"));
var Basemap_1 = __importDefault(require("./classes/Basemap"));
var http_1 = require("./utils/http");
var District_1 = require("./classes/District");
var Subdistrict_1 = require("./classes/Subdistrict");
var Neighbor_1 = require("./classes/Neighbor");
/**
 * Class utama dari GeoMan
 * @class GeoMan
 */
var GeoMan = /** @class */ (function () {
    /**
     * Membuat instance dari class GeoMan
     * @param baseURL base url server geoman
     * @param port port server geoman
     * @param options map options
     * @param style style map GeoMan: DEFAULT | DARK | LIGHT | WORLD
     */
    function GeoMan(baseURL, port, options, style) {
        if (style === void 0) { style = 'DEFAULT'; }
        this.sources = [];
        this.layers = [];
        this.baseURL = baseURL;
        this.port = port;
        this.fullURL = "" + this.baseURL + (this.port === 80 ? '' : ":" + this.port);
        this.http = new http_1.HTTP(this.baseURL, this.port);
        var link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.1.1/mapbox-gl.css';
        document.head.appendChild(link);
        options.style = this.fullURL + "/api/public/tclayer?port=" + this.port + "&style=" + style.toLowerCase();
        this.center = options.center;
        this.map = new mapbox_gl_1.default.Map(options);
    }
    /**
     * Set callback saat style map sudah selesai di-load
     */
    GeoMan.prototype.setReadyCallback = function (fn) {
        this.map.on('style.load', fn);
    };
    /**
     * Tambah GeoJSON ke map
     * @param id string unik untuk menandai layer
     * @param data data geojson
     */
    GeoMan.prototype.addGeoJSON = function (id, type, data) {
        return this.map.addLayer({
            id: id,
            type: type,
            source: {
                type: 'geojson',
                data: data
            },
        });
    };
    /**
     * Hapus layer GeoJSON dari map
     * @param id id layer untuk dihapus
     */
    GeoMan.prototype.removeGeoJSON = function (id) {
        return this.map.removeLayer(id);
    };
    /**
     * Ambil daftar basemap publik
     */
    GeoMan.prototype.getBasemaps = function () {
        var _this = this;
        return this.http.get('/maps/basemaps')
            .then(function (data) {
            return data.map(function (r) { return new Basemap_1.default(_this, r); });
        });
    };
    /**
     * Ambil daftar kecamatan
     */
    GeoMan.prototype.getDistricts = function () {
        var _this = this;
        return this.http.get('/maps/districts')
            .then(function (data) {
            return data.map(function (r) { return new District_1.District(_this, r); });
        });
    };
    /**
     * Ambil kecamatan berdasarkan id
     * @param id id kecamatan
     */
    GeoMan.prototype.getDistrict = function (id) {
        var _this = this;
        return this.http.get("/maps/districts/" + id)
            .then(function (data) {
            return new District_1.District(_this, data);
        });
    };
    /**
     * Ambil kelurahan berdasarkan id kecamatan dan id kelurahan
     * @param district_id id kecamatan
     * @param subdistrict_id id kelurahan
     */
    GeoMan.prototype.getSubdistrict = function (district_id, subdistrict_id) {
        var _this = this;
        return this.http.get("/maps/districts/" + district_id + "/subdistricts/" + subdistrict_id)
            .then(function (data) {
            var district = new District_1.District(_this, data.district);
            return new Subdistrict_1.Subdistrict(_this, district, data);
        });
    };
    /**
     * Ambil lingkungan berdasarkan id kecamatan dan id kelurahan dan id lingkungan
     * @param district_id id kecamatan
     * @param subdistrict_id id kelurahan
     * @param neighbor_id id lingkungan
     */
    GeoMan.prototype.getNeighbor = function (district_id, subdistrict_id, neighbor_id) {
        var _this = this;
        return this.http.get("/maps/districts/" + district_id + "/subdistricts/" + subdistrict_id + "/neighbors/" + neighbor_id)
            .then(function (data) {
            var district = new District_1.District(_this, data.district);
            var subdistrict = new Subdistrict_1.Subdistrict(_this, district, data.subdistrict);
            return new Neighbor_1.Neighbor(_this, district, subdistrict, data);
        });
    };
    /**
     * Mengubah style map
     * @param style id style
     */
    GeoMan.prototype.setStyle = function (style) {
        this.map.setStyle(this.fullURL + "/api/public/tclayer?port=" + this.port + "&style=" + style.toLowerCase());
    };
    /**
     * Clear semua fokus daerah dan center ke default
     */
    GeoMan.prototype.clearFocuses = function () {
        if (this.map.getLayer('region-lay')) {
            this.map.removeLayer('region-lay');
            this.map.removeSource('region-lay');
        }
        this.map.flyTo({ center: this.center });
    };
    /**
     * Menentukan event di label wilayah
     * @param ev event untuk di-attach
     * @param regionName nama region yang akan di-attach event
     * @param cb callback ketika event terjadi
     */
    GeoMan.prototype.setRegionLabelEvent = function (ev, regionName, cb) {
        var _this = this;
        var layerName = "tc-basemap-layer-" + regionName + "-label";
        this.map.on(ev, layerName, function (d) { return cb(d.features ? d.features[0] : null, d); });
        this.map.on('mouseenter', layerName, function (e) {
            _this.map.getCanvas().style.cursor = 'pointer';
        });
        this.map.on('mouseleave', layerName, function (e) {
            _this.map.getCanvas().style.cursor = '';
        });
    };
    GeoMan.Styles = {
        DEFAULT: 'DEFAULT',
        DARK: 'DARK',
        LIGHT: 'LIGHT',
        WORLD: 'WORLD',
        REGIONAL: 'REGIONAL',
        SATELLITE: 'SATELLITE'
    };
    return GeoMan;
}());
exports.default = GeoMan;
//# sourceMappingURL=geoman.js.map