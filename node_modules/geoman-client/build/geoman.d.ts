import mapbox from 'mapbox-gl';
import Basemap from './classes/Basemap';
import { HTTP } from './utils/http';
import { District } from './classes/District';
import { Subdistrict } from './classes/Subdistrict';
import { Neighbor } from './classes/Neighbor';
export declare type GeoManMapStyle = 'DEFAULT' | 'DARK' | 'LIGHT' | 'WORLD' | 'REGIONAL' | 'SATELLITE';
/**
 * Class utama dari GeoMan
 * @class GeoMan
 */
export default class GeoMan {
    map: mapbox.Map;
    sources: string[];
    layers: string[];
    fullURL: string;
    private baseURL;
    private port;
    private center;
    static Styles: {
        [k: string]: GeoManMapStyle;
    };
    http: HTTP;
    /**
     * Membuat instance dari class GeoMan
     * @param baseURL base url server geoman
     * @param port port server geoman
     * @param options map options
     * @param style style map GeoMan: DEFAULT | DARK | LIGHT | WORLD
     */
    constructor(baseURL: string, port: number, options: mapbox.MapboxOptions, style?: GeoManMapStyle);
    /**
     * Set callback saat style map sudah selesai di-load
     */
    setReadyCallback(fn: (ev: any) => void): void;
    /**
     * Tambah GeoJSON ke map
     * @param id string unik untuk menandai layer
     * @param data data geojson
     */
    addGeoJSON(id: string, type: 'line' | 'symbol' | 'fill' | 'circle', data: mapbox.GeoJSONSourceOptions['data']): mapbox.Map;
    /**
     * Hapus layer GeoJSON dari map
     * @param id id layer untuk dihapus
     */
    removeGeoJSON(id: string): mapbox.Map;
    /**
     * Ambil daftar basemap publik
     */
    getBasemaps(): Promise<Basemap[]>;
    /**
     * Ambil daftar kecamatan
     */
    getDistricts(): Promise<District[]>;
    /**
     * Ambil kecamatan berdasarkan id
     * @param id id kecamatan
     */
    getDistrict(id: number): Promise<District>;
    /**
     * Ambil kelurahan berdasarkan id kecamatan dan id kelurahan
     * @param district_id id kecamatan
     * @param subdistrict_id id kelurahan
     */
    getSubdistrict(district_id: number, subdistrict_id: number): Promise<Subdistrict>;
    /**
     * Ambil lingkungan berdasarkan id kecamatan dan id kelurahan dan id lingkungan
     * @param district_id id kecamatan
     * @param subdistrict_id id kelurahan
     * @param neighbor_id id lingkungan
     */
    getNeighbor(district_id: number, subdistrict_id: number, neighbor_id: number): Promise<Neighbor>;
    /**
     * Mengubah style map
     * @param style id style
     */
    setStyle(style: GeoManMapStyle): void;
    /**
     * Clear semua fokus daerah dan center ke default
     */
    clearFocuses(): void;
    /**
     * Menentukan event di label wilayah
     * @param ev event untuk di-attach
     * @param regionName nama region yang akan di-attach event
     * @param cb callback ketika event terjadi
     */
    setRegionLabelEvent(ev: 'touchcancel' | 'touchend' | 'touchstart' | 'click' | 'contextmenu' | 'dblclick' | 'mousemove' | 'mouseup' | 'mousedown' | 'mouseout' | 'mouseover' | 'mouseenter' | 'mouseleave', regionName: 'district' | 'subdistrict' | 'neighbor', cb: (feature: mapbox.MapboxGeoJSONFeature | null, ev: (mapbox.MapTouchEvent & {
        features?: mapbox.MapboxGeoJSONFeature[] | undefined;
    } & mapbox.EventData) | (mapbox.MapMouseEvent & {
        features?: mapbox.MapboxGeoJSONFeature[] | undefined;
    } & mapbox.EventData)) => void): void;
}
